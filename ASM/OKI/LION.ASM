
INCLUDE	MDOS.H
INCLUDE	MACRO.H
INCLUDE	STD.H

R_BUF_SIZE	EQU	258
W_BUF_SIZE	EQU	256


CODE	SEGMENT	PUBLIC
	ASSUME	CS:CODE,DS:CODE,SS:CODE,ES:CODE

	ORG	80H
DTA	DB	80H	DUP(?)
	ORG	100H

START:
		MOV	SI,OFFSET DTA[0]
		CMP	BYTE PTR [SI],0
		JE	MENU_INPUT
		INC	SI
		CALL	PARA_SET
		JNC	C_LINE0
		JMP	PARA_ERR
C_LINE0:
		MOV	DI,OFFSET SOURCE[2]
	REP	MOVSB
		MOV	AL,NUL
		STOSB

		CALL	PARA_SET
		JNC	C_LINE1
		JMP	PARA_ERR
C_LINE1:
		MOV	DI,OFFSET DEST[2]
	REP	MOVSB
		MOV	AL,NUL
		STOSB
		JMP	MAIN
MENU_INPUT:
		DISPLAY		SNAME

		MOV	DX,OFFSET SOURCE
		MOV	AH,0AH
		INT	21H

		MOV	SI,OFFSET SOURCE[2]
		MOV	BL,SOURCE[1]
		XOR	BH,BH
		MOV	BYTE PTR [BX+SI],0

		DISPLAY		DNAME

		MOV	DX,OFFSET DEST
		MOV	AH,0AH
		INT	21H

		MOV	DI,OFFSET DEST[2]
		MOV	BL,DEST[1]
		XOR	BH,BH
		MOV	BYTE PTR [BX+DI],0

MAIN:
		OPEN_HANDLE	SOURCE[2],0

		JC	OPENERR
		MOV	HANDLE_S,AX

		CREATE_HANDLE	DEST[2],0

		JC	MEKEERR
		MOV	HANDLE_D,AX

;	READ_HANDLE	MACRO	HANDLE,BUFFER,BYTES
;			MOV	BX,HANDLE
;			MOV	DX,OFFSET BUFFER
;			MOV	CX,BYTES
;			MOV	AH,3FH
;			INT	21H
;			ENDM


NXTREC:

		READ_HANDLE	HANDLE_S,R_BUFFER,R_BUF_SIZE
		
		JC	READERR
		CMP	AX,0
		JE	CPYEND
		CMP	AX,R_BUF_SIZE
		MOV	R_BUF_STK,AX
		MOV	AX,W_BUF_SIZE
		JE	DEST_W
		MOV	AX,R_BUF_STK
			
;
;WRITE_HANDLE	MACRO	HANDLE,DATA,BYTES
;		MOV	BX,HANDLE
;		MOV	DX,OFFSET DATA
;		MOV	CX,BYTES
;		MOV	AH,40H
;		INT	21H
;		ENDM

DEST_W:
;		MOV	R_BUFFER[256],0DH
;		MOV	R_BUFFER[257],0AH
		WRITE_HANDLE	HANDLE_D,R_BUFFER,AX
		
		JC	WRTERR
		CMP	CX,AX
		JE	NXTREC
		JMP	DISK_FULL

OPENERR:
		MOV	DX,OFFSET MSGSER
		JMP	SHORT	MSGOUT

MEKEERR:
		MOV	DX,OFFSET MSGMER
		JMP	SHORT	MSGOUT

READERR:
		MOV	DX,OFFSET MSGRER
		JMP	SHORT	MSGOUT

WRTERR:		MOV	DX,OFFSET MSGWER
		JMP	SHORT	MSGOUT

DELERR:		MOV	DX,OFFSET MSGDER
		JMP	SHORT	MSGOUT

CPYEND:
		CLOSE_HANDLE	HANDLE_D

		JC	CLSERR
		MOV	DX,OFFSET MSGEND
		JMP	SHORT	MSGOUT
;
CLSERR:		MOV	DX,OFFSET MSGCER
;
MSGOUT:
		MOV	AH,09H
		INT	21H
;
		END_PROCESS


DISK_FULL:
		CLOSE_HANDLE	HANDLE_D
		JC	CLSERR
		DELETE_ENTRY	DEST[2]
		JC	DELERR
		MOV	DX,OFFSET MSGFER
		JMP	SHORT	MSGOUT


PARA_ERR:
		MOV	DX,OFFSET MSGPARA
		JMP	SHORT	MSGOUT

PARA_SET	PROC	NEAR
		MOV	CX,0
PARA1:
		LODSB
		CMP	AL,CR
		JE	PARA_END
		CMP	AL,SPC
		JE	PARA1
		CMP	AL,","
		JE	PARA1
		CMP	AL,TAB
		JE	PARA1
		
		PUSH	SI
PARA_CHR:
		INC	CX
		LODSB
		CMP	AL,CR
		JE	CHR_END
		CMP	AL,SPC
		JE	CHR_END
		CMP	AL,","
		JE	CHR_END
		CMP	AL,TAB
		JE	CHR_END
		JMP	SHORT	PARA_CHR

PARA_END:
		STC
		JMP	SHORT	PARA_EXIT
CHR_END:
		POP	SI
		DEC	SI
		CLC
PARA_EXIT:
		RET
PARA_SET	ENDP



MSGDER		DB	CR,LF,LF,"본본Delete Err",CR,LF,"$"

MSGFER		DB	CR,LF,LF,"본본Disk Full",CR,LF,"$"

MSGSER		DB	CR,LF,LF,'본본Source File Not Found',CR,LF,'$'

MSGMER		DB	CR,LF,LF,'본본Directory Full',CR,LF,'$'

MSGRER		DB	CR,LF,LF,'본본Read error',CR,LF,'$'

MSGWER		DB	CR,LF,LF,'본본Disk Full',CR,LF,'$'

MSGCER		DB	CR,LF,LF,'본본Cannot Close',CR,LF,'$'

MSGEND		DB	CR,LF,LF,'본본Copy Complete',CR,LF,'$'

MSGPARA		DB	CR,LF,LF,"본본Parameter Err",CR,LF,"$"

SNAME		DB	CR,LF,'Source name ? $'

DNAME		DB	CR,LF,'Dest name ? $'

SOURCE		DB	62,63 DUP (?)

DEST		DB	62,63 DUP (?)

HANDLE_S	DW	?

HANDLE_D	DW	?

R_BUF_STK	DW	?

R_BUFFER	DB	R_BUF_SIZE DUP(?)

CODE		ENDS
		END	START
